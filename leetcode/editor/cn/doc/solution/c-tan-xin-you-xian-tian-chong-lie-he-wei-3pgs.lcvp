## 思路：

    优先填充列和为2的列，这样可以保证答案合理  

## 代码：

* c++

```c++
int n = (int)colsum.size();
vector<vector<int>> arrs(2, vector<int>(n, 0));
for(int i=0;i<n;++i){
    if(colsum[i]==2){
        if(lower==0||upper==0)return {}; // 如果某行的数值不够了就直接返回空数组
        upper--;
        lower--;
        arrs[0][i]=1;
        arrs[1][i]=1;
        colsum[i]=0; // 记得把这列的和置为0，因为已经处理过了
    }
}
```

接着处理其他列，列和为0的列不用处理，纯模拟就行

* c++

```c++
for(int i=0;i<n;++i){
    if(colsum[i]==1){
        if(upper>0){
            arrs[0][i]=1;
            upper--;
        }
        else if(lower>0){
            arrs[1][i]=1;
            lower--;
        }else{
            return {};
        }
    }
}
```

**最后判断`upper`和`lower`是否为0**

* c++

```c++
if(upper!=0||lower!=0)return {};
return arrs;
```

