### 1、思路

**(双链表+哈希)** $O(1)$

**使用一个双链表和一个哈希表：**

- 双链表存储一个节点被使用（get或者put）的时间戳，且按最近使用时间从左到右排好序，最先被使用的节点放在双链表的第一位，因此双链表的最后一位就是最久未被使用的节点；

![image-20220127134000873.png](https://pic.leetcode-cn.com/1643262004-OtWDih-image-20220127134000873.png)

- 哈希表存储`key`对应的链表中的节点地址,用于`key-value` 的增删改查；

![image-20220127134342582.png](https://pic.leetcode-cn.com/1643262241-zktpJQ-image-20220127134342582.png)

**初始化：**

- `n` 是缓存大小；
- 双链表和哈希表都为空；

**get(key)：**

首先用哈希表判断`key`是否存在：

- 如果`key`不存在，则返回-1；

- 如果`key`存在，则返回对应的`value`，同时将`key`对应的节点放到双链表的最左侧；

**put(key, value)：**

首先用哈希表判断`key`是否存在：

- 如果`key`存在，则修改对应的`value`，同时将`key`对应的节点放到双链表的最左侧；
- 如果`key`不存在：
  - 如果缓存已满，则删除双链表最右侧的节点（上次使用时间最老的节点），更新哈希表；
  - 否则，插入`(key, value)`：同时将`key`对应的节点放到双链表的最左侧，更新哈希表；

**时间复杂度分析**：双链表和哈希表的增删改查操作的时间复杂度都是 $O(1)$，所以`get`和`put`操作的时间复杂度也都是 $O(1)$。

**对应的双链表的几种操作**

1、删除p节点

![image-20220127135038940.png](https://pic.leetcode-cn.com/1643262655-KckhLz-image-20220127135038940.png)

* c++

```c++
p->right->left = p->left;
p->left->right = p->right;
```

2、在L节点之后插入p节点

![image-20220127135858331.png](https://pic.leetcode-cn.com/1643263209-QYWILJ-image-20220127135858331.png)

* cpp

```cpp
p->right = L->right;
p->left = L;
L->right->left = p;
L->right = p;
```

### 2、代码

* cpp

```cpp
class LRUCache {
public:

    //定义双链表
    struct Node{
        int key,value;
        Node* left ,*right;
        Node(int _key,int _value): key(_key),value(_value),left(NULL),right(NULL){}
    }*L,*R;//双链表的最左和最右节点，不存贮值。
    int n;
    unordered_map<int,Node*>hash;

    void remove(Node* p)
    {
        p->right->left = p->left;
        p->left->right = p->right;
    }
    void insert(Node *p)
    {
        p->right = L->right;
        p->left = L;
        L->right->left = p;
        L->right = p;
    }
    LRUCache(int capacity) {
        n = capacity;
        L = new Node(-1,-1),R = new Node(-1,-1);
        L->right = R;
        R->left = L;    
    }
    
    int get(int key) {
        if(hash.count(key) == 0) return -1; //不存在关键字 key 
        auto p = hash[key];
        remove(p);
        insert(p);//将当前节点放在双链表的第一位
        return p->value;
    }
    
    void put(int key, int value) {
        if(hash.count(key)) //如果key存在，则修改对应的value
        {
            auto p = hash[key];
            p->value = value;
            remove(p);
            insert(p);
        }
        else 
        {
            if(hash.size() == n) //如果缓存已满，则删除双链表最右侧的节点
            {
                auto  p = R->left;
                remove(p);
                hash.erase(p->key); //更新哈希表
                delete p; //释放内存
            }
            //否则，插入(key, value)
            auto p = new Node(key,value);
            hash[key] = p;
            insert(p);
        }
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
```

![在这里插入图片描述](https://pic.leetcode-cn.com/1625650519-AHCsBH-file_1625650518802)
